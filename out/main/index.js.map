{"version":3,"file":"index.js","sources":["/Users/webcraftlabs/Desktop/Projects/flashpack/node_modules/@electron-toolkit/utils/dist/index.mjs","webpack/runtime/compat_get_default_export","webpack/runtime/define_property_getters","webpack/runtime/has_own_property","webpack/runtime/make_namespace_object","webpack/runtime/public_path","/Users/webcraftlabs/Desktop/Projects/flashpack/src/main/index.ts"],"sourcesContent":["import { app, session, ipcMain, BrowserWindow } from 'electron';\n\nconst is = {\n  dev: !app.isPackaged\n};\n\nconst platform = {\n  isWindows: process.platform === \"win32\",\n  isMacOS: process.platform === \"darwin\",\n  isLinux: process.platform === \"linux\"\n};\n\nconst electronApp = {\n  setAppUserModelId(id) {\n    if (platform.isWindows)\n      app.setAppUserModelId(is.dev ? process.execPath : id);\n  },\n  setAutoLaunch(auto) {\n    if (platform.isLinux)\n      return false;\n    const isOpenAtLogin = () => {\n      return app.getLoginItemSettings().openAtLogin;\n    };\n    if (isOpenAtLogin() !== auto) {\n      app.setLoginItemSettings({\n        openAtLogin: auto,\n        path: process.execPath\n      });\n      return isOpenAtLogin() === auto;\n    } else {\n      return true;\n    }\n  },\n  skipProxy() {\n    return session.defaultSession.setProxy({ mode: \"direct\" });\n  }\n};\n\nlet listeners = [];\nlet handlers = [];\nconst ipcHelper = {\n  handle(channel, listener) {\n    handlers.push(channel);\n    ipcMain.handle(channel, listener);\n  },\n  on(channel, listener) {\n    listeners.push(channel);\n    ipcMain.on(channel, listener);\n    return this;\n  },\n  removeAllListeners() {\n    listeners.forEach((c) => ipcMain.removeAllListeners(c));\n    listeners = [];\n    return this;\n  },\n  removeAllHandlers() {\n    handlers.forEach((c) => ipcMain.removeHandler(c));\n    handlers = [];\n  },\n  removeListeners(channels) {\n    channels.forEach((c) => ipcMain.removeAllListeners(c));\n    return this;\n  },\n  removeHandlers(channels) {\n    channels.forEach((c) => ipcMain.removeHandler(c));\n  }\n};\n\nconst optimizer = {\n  watchWindowShortcuts(window, shortcutOptions) {\n    if (!window)\n      return;\n    const { webContents } = window;\n    const { escToCloseWindow = false, zoom = false } = shortcutOptions || {};\n    webContents.on(\"before-input-event\", (event, input) => {\n      if (input.type === \"keyDown\") {\n        if (!is.dev) {\n          if (input.code === \"KeyR\" && (input.control || input.meta))\n            event.preventDefault();\n        } else {\n          if (input.code === \"F12\") {\n            if (webContents.isDevToolsOpened()) {\n              webContents.closeDevTools();\n            } else {\n              webContents.openDevTools({ mode: \"undocked\" });\n              console.log(\"Open dev tool...\");\n            }\n          }\n        }\n        if (escToCloseWindow) {\n          if (input.code === \"Escape\" && input.key !== \"Process\") {\n            window.close();\n            event.preventDefault();\n          }\n        }\n        if (!zoom) {\n          if (input.code === \"Minus\" && (input.control || input.meta))\n            event.preventDefault();\n          if (input.code === \"Equal\" && input.shift && (input.control || input.meta))\n            event.preventDefault();\n        }\n      }\n    });\n  },\n  registerFramelessWindowIpc() {\n    ipcMain.on(\"win:invoke\", (event, action) => {\n      const win = BrowserWindow.fromWebContents(event.sender);\n      if (win) {\n        if (action === \"show\") {\n          win.show();\n        } else if (action === \"showInactive\") {\n          win.showInactive();\n        } else if (action === \"min\") {\n          win.minimize();\n        } else if (action === \"max\") {\n          const isMaximized = win.isMaximized();\n          if (isMaximized) {\n            win.unmaximize();\n          } else {\n            win.maximize();\n          }\n        } else if (action === \"close\") {\n          win.close();\n        }\n      }\n    });\n  }\n};\n\nexport { electronApp, ipcHelper, is, optimizer, platform };\n","// getDefaultExport function for compatibility with non-ESM modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","import { app, shell, BrowserWindow, ipcMain } from 'electron'\nimport { join } from 'path'\nimport { electronApp, optimizer, is } from '@electron-toolkit/utils'\nimport icon from '../../resources/icon.png?asset'\n\nfunction createWindow(): void {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 900,\n    height: 670,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === 'linux' ? { icon } : {}),\n    webPreferences: {\n      preload: join(__dirname, '../preload/index.js'),\n      sandbox: false\n    }\n  })\n\n  // mainWindow.title = 'Electron-Rsbuild app'\n  mainWindow.on('ready-to-show', () => {\n    mainWindow.show()\n  })\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url)\n    return { action: 'deny' }\n  })\n\n  // HMR for renderer base on electron-rsbuild cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n  } else {\n    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))\n  }\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId('com.electron')\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on('browser-window-created', (_, window) => {\n    optimizer.watchWindowShortcuts(window)\n  })\n\n  // IPC test\n  ipcMain.on('ping', (event) => {\n    event.reply('pong', { message: 'copy that.', time: new Date().getTime() })\n    console.log('pong')\n  })\n\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":[],"mappingsjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACNA;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA"}