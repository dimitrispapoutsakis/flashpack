{"version":3,"file":"index.js","sources":["/Users/webcraftlabs/Desktop/Projects/flashpack/node_modules/@electron-toolkit/utils/dist/index.mjs","webpack/runtime/compat_get_default_export","webpack/runtime/define_property_getters","webpack/runtime/has_own_property","webpack/runtime/make_namespace_object","webpack/runtime/public_path","/Users/webcraftlabs/Desktop/Projects/flashpack/src/main/index.ts"],"sourcesContent":["import { app, session, ipcMain, BrowserWindow } from 'electron';\n\nconst is = {\n  dev: !app.isPackaged\n};\n\nconst platform = {\n  isWindows: process.platform === \"win32\",\n  isMacOS: process.platform === \"darwin\",\n  isLinux: process.platform === \"linux\"\n};\n\nconst electronApp = {\n  setAppUserModelId(id) {\n    if (platform.isWindows)\n      app.setAppUserModelId(is.dev ? process.execPath : id);\n  },\n  setAutoLaunch(auto) {\n    if (platform.isLinux)\n      return false;\n    const isOpenAtLogin = () => {\n      return app.getLoginItemSettings().openAtLogin;\n    };\n    if (isOpenAtLogin() !== auto) {\n      app.setLoginItemSettings({\n        openAtLogin: auto,\n        path: process.execPath\n      });\n      return isOpenAtLogin() === auto;\n    } else {\n      return true;\n    }\n  },\n  skipProxy() {\n    return session.defaultSession.setProxy({ mode: \"direct\" });\n  }\n};\n\nlet listeners = [];\nlet handlers = [];\nconst ipcHelper = {\n  handle(channel, listener) {\n    handlers.push(channel);\n    ipcMain.handle(channel, listener);\n  },\n  on(channel, listener) {\n    listeners.push(channel);\n    ipcMain.on(channel, listener);\n    return this;\n  },\n  removeAllListeners() {\n    listeners.forEach((c) => ipcMain.removeAllListeners(c));\n    listeners = [];\n    return this;\n  },\n  removeAllHandlers() {\n    handlers.forEach((c) => ipcMain.removeHandler(c));\n    handlers = [];\n  },\n  removeListeners(channels) {\n    channels.forEach((c) => ipcMain.removeAllListeners(c));\n    return this;\n  },\n  removeHandlers(channels) {\n    channels.forEach((c) => ipcMain.removeHandler(c));\n  }\n};\n\nconst optimizer = {\n  watchWindowShortcuts(window, shortcutOptions) {\n    if (!window)\n      return;\n    const { webContents } = window;\n    const { escToCloseWindow = false, zoom = false } = shortcutOptions || {};\n    webContents.on(\"before-input-event\", (event, input) => {\n      if (input.type === \"keyDown\") {\n        if (!is.dev) {\n          if (input.code === \"KeyR\" && (input.control || input.meta))\n            event.preventDefault();\n        } else {\n          if (input.code === \"F12\") {\n            if (webContents.isDevToolsOpened()) {\n              webContents.closeDevTools();\n            } else {\n              webContents.openDevTools({ mode: \"undocked\" });\n              console.log(\"Open dev tool...\");\n            }\n          }\n        }\n        if (escToCloseWindow) {\n          if (input.code === \"Escape\" && input.key !== \"Process\") {\n            window.close();\n            event.preventDefault();\n          }\n        }\n        if (!zoom) {\n          if (input.code === \"Minus\" && (input.control || input.meta))\n            event.preventDefault();\n          if (input.code === \"Equal\" && input.shift && (input.control || input.meta))\n            event.preventDefault();\n        }\n      }\n    });\n  },\n  registerFramelessWindowIpc() {\n    ipcMain.on(\"win:invoke\", (event, action) => {\n      const win = BrowserWindow.fromWebContents(event.sender);\n      if (win) {\n        if (action === \"show\") {\n          win.show();\n        } else if (action === \"showInactive\") {\n          win.showInactive();\n        } else if (action === \"min\") {\n          win.minimize();\n        } else if (action === \"max\") {\n          const isMaximized = win.isMaximized();\n          if (isMaximized) {\n            win.unmaximize();\n          } else {\n            win.maximize();\n          }\n        } else if (action === \"close\") {\n          win.close();\n        }\n      }\n    });\n  }\n};\n\nexport { electronApp, ipcHelper, is, optimizer, platform };\n","// getDefaultExport function for compatibility with non-ESM modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","import { electronApp, is, optimizer } from \"@electron-toolkit/utils\";\nimport { app, BrowserWindow, dialog, ipcMain, shell } from \"electron\";\nimport { readdir } from \"fs/promises\";\nimport { homedir } from \"os\";\nimport { join, resolve } from \"path\";\nimport icon from \"../../resources/icon.png?asset\";\nimport { spawn } from \"child_process\";\nimport { stdout } from \"process\";\n\n//  import { Installer } from \"@webos-tools/cli/APIs\";\n// console.log(Installer);\nfunction createWindow(): void {\n\t/* \tInstaller.list().then((res) => {\n\t\t\tconsole.log(res);\n\t\t});  */\n\t// Create the browser window.\n\tconst mainWindow = new BrowserWindow({\n\t\twidth: 1115,\n\t\theight: 850,\n\t\tshow: false,\n\t\tautoHideMenuBar: true,\n\t\tframe: false,\n\t\t...(process.platform === \"linux\" ? { icon } : {}),\n\t\twebPreferences: {\n\t\t\tpreload: join(__dirname, \"../preload/index.js\"),\n\t\t\tsandbox: false,\n\t\t\tcontextIsolation: true,\n\t\t},\n\t\ttitle: \"FlashPack\",\n\t});\n\n\t// mainWindow.title = 'Electron-Rsbuild app'\n\tmainWindow.on(\"ready-to-show\", () => {\n\t\tmainWindow.show();\n\t});\n\n\tmainWindow.webContents.setWindowOpenHandler((details) => {\n\t\tshell.openExternal(details.url);\n\t\treturn { action: \"deny\" };\n\t});\n\n\t// HMR for renderer base on electron-rsbuild cli.\n\t// Load the remote URL for development or the local html file for production.\n\tif (is.dev && process.env[\"ELECTRON_RENDERER_URL\"]) {\n\t\tmainWindow.loadURL(process.env[\"ELECTRON_RENDERER_URL\"]);\n\t} else {\n\t\tmainWindow.loadFile(join(__dirname, \"../renderer/index.html\"));\n\t}\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n\t// Set app user model id for windows\n\telectronApp.setAppUserModelId(\"com.electron\");\n\n\t// Default open or close DevTools by F12 in development\n\t// and ignore CommandOrControl + R in production.\n\t// see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n\tapp.on(\"browser-window-created\", (_, window) => {\n\t\toptimizer.watchWindowShortcuts(window);\n\t});\n\n\t// IPC test\n\tipcMain.on(\"ping\", (event) => {\n\t\tevent.reply(\"pong\", { message: \"copy that.\", time: new Date().getTime() });\n\t\tconsole.log(\"pong\");\n\t});\n\n\t// Window controls\n\tipcMain.on(\"window-minimize\", (event) => {\n\t\tconst window = BrowserWindow.fromWebContents(event.sender);\n\t\tconsole.log(window, \"here\");\n\t\twindow?.minimize();\n\t});\n\n\tipcMain.on(\"window-maximize\", (event) => {\n\t\tconst window = BrowserWindow.fromWebContents(event.sender);\n\t\tif (window?.isMaximized()) {\n\t\t\twindow.unmaximize();\n\t\t} else {\n\t\t\twindow?.maximize();\n\t\t}\n\t});\n\n\tipcMain.on(\"window-close\", (event) => {\n\t\tconst window = BrowserWindow.fromWebContents(event.sender);\n\t\twindow?.close();\n\t});\n\n\t// OS utilities\n\tipcMain.handle(\"get-home-dir\", () => {\n\t\treturn homedir();\n\t});\n\n\tipcMain.handle(\"get-hard-drive-dir\", () => {\n\t\treturn readdir(homedir());\n\t});\n\n\tipcMain.handle(\"get-webos-ipk-dir\", () => {\n\t\treturn join(homedir(), \"dev\", \"webos\", \"ipks\");\n\t});\n\n\tipcMain.handle(\"get-webos-sdk-dir\", () => {\n\t\tconst projectRoot = resolve(__dirname, \"../..\");\n\t\tconst NODE_MODULES_DIR = `${join(projectRoot, \"node_modules\")}/`;\n\t\tconst WEBOS_CLI_DIR = `${NODE_MODULES_DIR}@webos-tools/cli/bin/`;\n\t\treturn WEBOS_CLI_DIR;\n\t});\n\n\tipcMain.handle(\"create-env\", (event, env) => {\n\t\tconst fs = require(\"fs\");\n\t\tconst path = require(\"path\");\n\n\t\tconst envPath = path.join(process.cwd(), \".env\");\n\t\tlet envContent = \"\";\n\n\t\tif (env && typeof env === \"object\") {\n\t\t\tenvContent = Object.entries(env)\n\t\t\t\t.map(([key, value]) => `${key.toString()}=${value.toString()}`)\n\t\t\t\t.join(\"\\n\");\n\t\t}\n\n\t\tfs.writeFileSync(envPath, envContent);\n\n\t\treturn { success: true, path: envPath };\n\t});\n\n\t// Dialog handlers\n\tipcMain.handle(\"show-open-dialog\", async (event, options) => {\n\t\tconst window = BrowserWindow.fromWebContents(event.sender);\n\t\tif (!window) {\n\t\t\tthrow new Error(\"Window not found\");\n\t\t}\n\t\tconst result = await dialog.showOpenDialog(window, options);\n\t\treturn result;\n\t});\n\n\tcreateWindow();\n\n\tapp.on(\"activate\", () => {\n\t\t// On macOS it's common to re-create a window in the app when the\n\t\t// dock icon is clicked and there are no other windows open.\n\t\tif (BrowserWindow.getAllWindows().length === 0) createWindow();\n\t});\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n\tif (process.platform !== \"darwin\") {\n\t\tapp.quit();\n\t}\n});\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":[],"mappingsjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACNA;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;AACA;;;;AAAA;AACA;AACA;AACA;AACA;;AAAA;;;AAAA;AACA;;AAAA;;;;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA"}