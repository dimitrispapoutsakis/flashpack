{"version":3,"file":"index.js","sources":["/Users/webcraftlabs/Desktop/Projects/flashpack/node_modules/@electron-toolkit/preload/dist/index.mjs","webpack/runtime/compat_get_default_export","webpack/runtime/define_property_getters","webpack/runtime/has_own_property","webpack/runtime/make_namespace_object","/Users/webcraftlabs/Desktop/Projects/flashpack/src/preload/index.ts"],"sourcesContent":["import { webUtils, webFrame, ipcRenderer, contextBridge } from 'electron';\n\nconst electronAPI = {\n    ipcRenderer: {\n        send(channel, ...args) {\n            ipcRenderer.send(channel, ...args);\n        },\n        sendTo(webContentsId, channel, ...args) {\n            const electronVer = process.versions.electron;\n            const electronMajorVer = electronVer ? parseInt(electronVer.split('.')[0]) : 0;\n            if (electronMajorVer >= 28) {\n                throw new Error('\"sendTo\" method has been removed since Electron 28.');\n            }\n            else {\n                ipcRenderer.sendTo(webContentsId, channel, ...args);\n            }\n        },\n        sendSync(channel, ...args) {\n            return ipcRenderer.sendSync(channel, ...args);\n        },\n        sendToHost(channel, ...args) {\n            ipcRenderer.sendToHost(channel, ...args);\n        },\n        postMessage(channel, message, transfer) {\n            ipcRenderer.postMessage(channel, message, transfer);\n        },\n        invoke(channel, ...args) {\n            return ipcRenderer.invoke(channel, ...args);\n        },\n        on(channel, listener) {\n            ipcRenderer.on(channel, listener);\n            return () => {\n                ipcRenderer.removeListener(channel, listener);\n            };\n        },\n        once(channel, listener) {\n            ipcRenderer.once(channel, listener);\n            return () => {\n                ipcRenderer.removeListener(channel, listener);\n            };\n        },\n        removeListener(channel, listener) {\n            ipcRenderer.removeListener(channel, listener);\n            return this;\n        },\n        removeAllListeners(channel) {\n            ipcRenderer.removeAllListeners(channel);\n        }\n    },\n    webFrame: {\n        insertCSS(css) {\n            return webFrame.insertCSS(css);\n        },\n        setZoomFactor(factor) {\n            if (typeof factor === 'number' && factor > 0) {\n                webFrame.setZoomFactor(factor);\n            }\n        },\n        setZoomLevel(level) {\n            if (typeof level === 'number') {\n                webFrame.setZoomLevel(level);\n            }\n        }\n    },\n    webUtils: {\n        getPathForFile(file) {\n            return webUtils.getPathForFile(file);\n        }\n    },\n    process: {\n        get platform() {\n            return process.platform;\n        },\n        get versions() {\n            return process.versions;\n        },\n        get env() {\n            return { ...process.env };\n        }\n    }\n};\n/**\n * Expose Electron APIs from your preload script, the API\n * will be accessible from the website on `window.electron`.\n */\nfunction exposeElectronAPI() {\n    if (process.contextIsolated) {\n        try {\n            contextBridge.exposeInMainWorld('electron', electronAPI);\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n    else {\n        // @ts-ignore (need dts)\n        window.electron = electronAPI;\n    }\n}\n\nexport { electronAPI, exposeElectronAPI };\n","// getDefaultExport function for compatibility with non-ESM modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { electronAPI } from \"@electron-toolkit/preload\";\nimport { spawn } from \"child_process\";\nimport { contextBridge } from \"electron\";\n\n// Custom APIs for renderer\nconst api = {\n\twindow: {\n\t\tminimize: () => electronAPI.ipcRenderer.send(\"window-minimize\"),\n\t\tmaximize: () => electronAPI.ipcRenderer.send(\"window-maximize\"),\n\t\tclose: () => electronAPI.ipcRenderer.send(\"window-close\"),\n\t},\n\tos: {\n\t\tgetHomeDir: () => electronAPI.ipcRenderer.invoke(\"get-home-dir\"),\n\t\tgetHardDriveDir: () => electronAPI.ipcRenderer.invoke(\"get-hard-drive-dir\"),\n\t\tgetWebOsSDKDir: () => electronAPI.ipcRenderer.invoke(\"get-webos-sdk-dir\"),\n\t\tgetWebOsIPKDir: () => electronAPI.ipcRenderer.invoke(\"get-webos-ipk-dir\"),\n\t},\n\tdialog: {\n\t\tshowOpenDialog: (options: Electron.OpenDialogOptions) =>\n\t\t\telectronAPI.ipcRenderer.invoke(\"show-open-dialog\", options),\n\t},\n\tcli: {\n\t\tgetDevices: () => {\n\t\t\tconst aresCliCmd = spawn(\"ares-setup-device\", [\"--list\"]);\n\t\t\tconst excludedDevices = [\"name\", \"------------------\", \"emulator\", \"\"];\n\t\t\tlet devices: any[] = [];\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\taresCliCmd.stdout.on(\"data\", (data) => {\n\t\t\t\t\tconsole.log(data.toString());\n\t\t\t\t\tdevices = data\n\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t.split(\"\\n\")\n\t\t\t\t\t\t.map((line) => line.trim())\n\t\t\t\t\t\t.map((device) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tname: device.split(\" \")[0],\n\t\t\t\t\t\t\t\tdeviceInfo: device.split(\" \")[3],\n\t\t\t\t\t\t\t\tssh: device.split(\" \")[5],\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter((device) => !excludedDevices.includes(device.name));\n\t\t\t\t\tresolve(devices);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\tupgradeWebos: (deviceName: string) =>\n\t\t\telectronAPI.ipcRenderer.invoke(\"upgrade-webos\", deviceName),\n\t},\n};\n\n// Use `contextBridge` APIs to expose Electron APIs to\n// renderer only if context isolation is enabled, otherwise\n// just add to the DOM global.\nif (process.contextIsolated) {\n\ttry {\n\t\tcontextBridge.exposeInMainWorld(\"electron\", electronAPI);\n\t\tcontextBridge.exposeInMainWorld(\"api\", api);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n} else {\n\t// @ts-expect-error (define in dts)\n\twindow.electron = electronAPI;\n\t// @ts-expect-error (define in dts)\n\twindow.api = api;\n}\n"],"names":[],"mappingspGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACNA;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}